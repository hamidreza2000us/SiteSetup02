satServer=sat.hbsaneet.com
satIP=172.18.99.59
OSVersion=1

echo -en ""
echo "Please notice your hostname should be unique in the domain or the installation may fail"
echo -en ""
read -rp "What is the Full URL of Satellite Server, without HTTP or HTTPS part ($satServer): " choice; [[ -n "${choice}"  ]] &&  export satServer="$choice";
echo -e " 1) RHEL8"
read -rp "Which type of Operating System is this ($OSVersion): " choice; [[ -n "${choice}"  ]] &&  export OSVersion="$choice";


hostname -s | grep -q localhost
if [[ $? == 0 ]]
then
	echo "Your hostname is $(hostname -s) which is not a uniq hostname."
	echo "please change hostname to a unique value exit the bash, enter and continue"
	echo "Exiting..."
	exit
fi

sed -i 's/172.18.99.59 sat.hbsaneet.com//g' /etc/hosts
echo "172.18.99.59 sat.hbsaneet.com" >> /etc/hosts


#check if dns access is possible
checkdns() {
dnsstatus=0
if [[ -f /usr/bin/host ]]
then
        host $1 | grep -vq "not found"
        [[ $? != 0 ]] &&  dnsstatus=1
else
        ping -c1 $1  2> /dev/null | head -n1 | grep -vq "not known"
        [[ $? != 0 ]] &&  dnsstatus=1
fi
        return ${dnsstatus}
}

dnsstatus=$(checkdns ${satServer})
if [[ $? != 0 ]]
then
        echo "DNS server can't resolve ${satServer}"
        read -rp "Enter the Satellite server IP to insert in /etc/hosts  ($satIP): " choice; [[ -n "${choice}"  ]] &&  export satIP="$choice";
		echo "${satIP} ${satServer}" >> /etc/hosts
fi
dnsstatus=$(checkdns ${satServer})
if [[ $? != 0 ]]
then
  echo "Setting the DNS failed. Exiting...."
  exit
fi

#extra work to set the dns if required later
#systemctl is-active NetworkManager | grep active &> /dev/null
#grep "# Generated by NetworkManager" /etc/resolv.conf
#activeCon=$( nmcli -m multiline -f name con sh --active | awk -F: '{print $2}' | sed -e 's/^[ \t]*//')
#nmcli con mod "$activeCon" ipv4.dns 172.17.58.97,172.17.58.98  ipv4.dns-search idm.mci.ir
#nmcli con reload
#cat > /etc/resolv.conf << EOF
#search idm.mci.ir
#nameserver 172.17.58.97
#nameserver 172.17.58.98
#EOF

which curl  &> /dev/null
if [[ $? != 0 ]]
then
    echo "curl command is not installed, we can't download the required package. Exiting..."
	exit
fi

#Test network access to Satellite Server
connstatus=0
which telnet  &> /dev/null
if [[ $? == 0 ]]
then
	echo -e '\x1dclose\x0d'  | telnet ${satServer} 443 > /dev/null
	if [[ $? != 0 ]]
	then
	  echo "There is no network connectivity to port 443 of ${satServer}. Exiting..."
	  exit
	fi
else 
    curl -k https://${satServer} &> /dev/null
	if [[ $? != 0 ]]
	then
	  echo "There is no network connectivity to port 443 of ${satServer}. Exiting..."
	  exit
	fi
fi

#install subscription-manager
which subscription-manager  &> /dev/null
if [[ $? != 0 ]]
then
  echo "The package subscription-manager is required and not exists. Exiting...."
  exit
fi

sudo subscription-manager remove --all &> /dev/null
sudo subscription-manager unregister &> /dev/null
sudo subscription-manager clean &> /dev/null

for i in $(rpm -qa | grep katello-ca-consumer)
do
   rpm -e $i
   echo $i
done

yum clean all
rm -rf /var/cache/yum/x86_64/*
rm -rf /var/cache/yum/i686/*

mv /etc/yum.repos.d /etc/yum.repos.d.back-$( date +"%Y%m%d%H:%M")
mkdir /etc/yum.repos.d
chmod 755 /etc/yum.repos.d

#to make sure setting proxy and later work doesn't affect the instllation
cp /etc/yum.conf /etc/yum.conf.back-$( date +"%Y%m%d%H:%M")
cat > /etc/yum.conf << EOF
[main]
cachedir=/var/cache/yum/$basearch/$releasever
keepcache=0
debuglevel=2
logfile=/var/log/yum.log
exactarch=1
obsoletes=1
gpgcheck=1
plugins=1
installonly_limit=3

#  This is the default, if you make this bigger yum won't see if the metadata
# is newer on the remote and so you'll "gain" the bandwidth of not having to
# download the new metadata and "pay" for it by yum not having correct
# information.
#  It is esp. important, to have correct metadata, for distributions like
# Fedora which don't keep old packages around. If you don't like this checking
# interupting your command line usage, it's much better to have something
# manually check the metadata once an hour (yum-updatesd will do this).
# metadata_expire=90m

# PUT YOUR REPOS HERE OR IN separate files named file.repo
# in /etc/yum.repos.d
EOF

curl -k https://${satServer}/pub/katello-ca-consumer-latest.noarch.rpm -o /tmp/katello-ca-consumer-latest.noarch.rpm &> /dev/null
if [[ $? != 0 ]]
then
  echo "Error Downloading the katello-ca-consumer. "
  echo "the command was: curl -k https://satellite.idm.mci.ir/pub/katello-ca-consumer-latest.noarch.rpm -o katello-ca-consumer-latest.noarch.rpm"
  grep -q satellite.idm.mci.ir /etc/hosts
  [[ $? == 0 ]] && echo "This can be because of incorrect IP in /etc/hosts. Please check it"
  echo "Exiting...."
  exit
fi
rpm -ihv /tmp/katello-ca-consumer-latest.noarch.rpm &> /dev/null
if [[ $? != 0 ]]
then
  echo "Error installing the katello-ca-consumer"
  echo "The command was: rpm -ihv katello-ca-consumer-latest.noarch.rpm"
  echo "Exiting...."
  exit
fi

case $OSVersion in
        1)
           activeKey="Ae9uN3MkH2"
          ;;
esac

subscription-manager register --org="IMS" --activationkey="${activeKey}" 
if [[ $? > 1 ]]
then
	subscription-manager register --org="IMS" --activationkey="${activeKey}" --force
	if [[ $? > 1 ]]
	then
	  echo "Installation Failed"
	  echo "Please check the logs above and resolve the issue"
	  echo "The error is often related to :"
	  echo "already registered hosts, invalid activation key, bad hostname, rhsm package or CA misconfiguration"
	  echo "If you are sure about above concerns please try again or perform a manual installation"
	  echo "and if failed again, escalate to Satellite Administrator."
	  echo "Exiting...."
	  exit
	fi
fi
yum repolist

echo -en "\r\n"
echo -en "\r\n"
echo "###################################################################"
echo "Installation was successful. "
echo "Please note there may be some not enabled repositories by default"
echo "You can find and enable them using commands below:"
echo "TO SEARCH -> subscription-manager repos --list"
echo "TO ENABLE -> subscription-manager repos --enable=REPOID"