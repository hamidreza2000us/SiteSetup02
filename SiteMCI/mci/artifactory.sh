#this server needs to have Internet access and also resolve.conf configured to resolve Internet
REPO=satellite.idm.mci.ir
parted -s -a optimal /dev/sdb unit MiB mklabel msdos mkpart primary xfs '0%' '100%'
pvcreate /dev/sdb1;
vgextend vg_sda /dev/sdb1
lvresize -l 100%FREE vg_sda/lv_root
xfs_growfs /

setenforce 0
echo "1.1.1.1 api.bintray.com"  >> /etc/hosts

yum -y install podman

#podman login docker.io -u hamidreza2000us -p Iahoora@123
#podman pull releases-docker.jfrog.io/jfrog/artifactory-pro:latest
curl http://${REPO}/pub/RHEL/Containers/artifactory-pro_latest.tar.gz -o artifactory-pro_latest.tar.gz
podman load -i artifactory-pro_latest.tar.gz
#podman pull docker.io/library/postgres:latest
curl http://${REPO}/pub/RHEL/Containers/postgres.tar -o postgres.tar
#FIXME: need official image with correct tag
podman load -i postgres.tar
podman tag localhost/postgres:latest docker.io/library/postgres:latest
#podman pull releases-docker.jfrog.io/jfrog/nginx-artifactory-pro:latest
curl http://${REPO}/pub/RHEL/Containers/nginx-artifactory-pro_latest.tar.gz -o nginx-artifactory-pro_latest.tar.gz
podman load -i nginx-artifactory-pro_latest.tar.gz



#clean up old installation
rm -rf /var/opt/jfrog/artifactory
cd /root/
rm -rf tomcat/ pgdata/

groupadd -g 1030 artifactory
useradd -u 1030 -g 1030 artifactory
mkdir -p /var/opt/jfrog/artifactory
semanage fcontext -a -t container_file_t /var/opt/jfrog/artifactory
restorecon -Rv /var/opt/jfrog/artifactory
chown artifactory:artifactory /var/opt/jfrog/artifactory
chmod 777 /var/opt/jfrog/artifactory

yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel 

export IP=${IP:="$(ip route get 8.8.8.8 | awk '{print $7; exit}')"}
systemctl disable --now firewalld


mkdir pgdata
podman run --privileged=true --restart=always --name postgres -d  -p 5432:5432 -v /root/pgdata:/var/lib/postgresql/data:rw \
-e POSTGRES_PASSWORD=password -e POSTGRES_USER=artifactory -e POSTGRES_DB=artifactory docker.io/library/postgres:latest
sleep 10
dockerID=$(podman ps --format "{{.ID}} {{.Image}} " | grep "/postgres:" |  awk '{print $1}')
podman logs $dockerID  | tail
#FIXME: DB_HOST just work with the IP (probably was /etc/resolve.conf problem)
podman run --privileged=true --restart=always   --name artifactory-pro   -d -v /var/opt/jfrog/artifactory:/var/opt/jfrog/artifactory:rw -p 8081:8081 -p 8082:8082 \
-e DB_TYPE=postgresql -e DB_HOST=${IP} -e DB_PORT=5432 -e DB_USER=artifactory -e DB_PASSWORD=password -e JF_SHARED_DATABASE_DRIVER=org.postgresql.Driver \
-e DB_URL=jdbc:postgresql://${IP}:5432/artifactory -e JF_SHARED_DATABASE_USERNAME=artifactory docker.bintray.io/jfrog/artifactory-pro:latest
sleep 10

dockerID=$(podman ps --format "{{.ID}} {{.Image}} " | grep "/artifactory-pro:" |  awk '{print $1}')
podman logs $dockerID  | grep -B 10  "Artifactory Home: '/opt/jfrog/artifactory'"
rm -rf /root/tomcat
podman cp ${dockerID}:/opt/jfrog/artifactory/app/artifactory/tomcat tomcat
curl http://${REPO}/pub/RHEL/Files/artifactory-injector-1.1.jar -o artifactory-injector-1.1.jar

echo -e '1\n\n2\n/root/tomcat/\nyes\nexit' |  java -jar artifactory-injector-1.1.jar &> /root/license
sleep 10
podman cp tomcat ${dockerID}:/opt/jfrog/artifactory/app/artifactory/
podman restart ${dockerID}

#login http://172.16.49.98:8081/artifactory/ with user admin and password password and change the password 
#exit the wizard (with x icon )and enter the license key in administration-> licenses

#to join to ldap in administration->security->LDAP
########################################
#ldapurl=ldap://idm.myhost.com/dc=myhost,dc=com ldap://ipa01.idm.mci.ir/dc=idm,dc=mci,dc=ir
#userdn= uid={0},cn=users,cn=accounts
#searchfilter=uid={0}
#searchbase=cn=users,cn=accounts,dc=myhost,dc=com  cn=users,cn=accounts,dc=idm,dc=mci,dc=ir
########################################

mkdir -p /var/opt/nginx/conf.d/
mkdir -p /var/opt/nginx/ssl
#semanage fcontext -a -t cert_t "/var/opt/jfrog/nginx/ssl"
#restorecon -Rv  /var/opt/jfrog/nginx

#FIXME: here needs permanent password
echo "Iahoora@123" | kinit cadmin
ipa service-add HTTP/$(hostname)
ipa-getcert request -K HTTP/$(hostname) -D $(hostname) \
-k /var/opt/nginx/ssl/$(hostname).key \
-f /var/opt/nginx/ssl/$(hostname).crt

#################################
cat > /var/opt/nginx/conf.d/artifactory.conf <<\EOF
###########################################################
## this configuration was generated by JFrog Artifactory ##
###########################################################

## add ssl entries when https has been set in config
ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
ssl_certificate      /var/opt/jfrog/nginx/ssl/artifactory.idm.mci.ir.crt;
ssl_certificate_key  /var/opt/jfrog/nginx/ssl/artifactory.idm.mci.ir.key;
ssl_session_cache shared:SSL:1m;
ssl_prefer_server_ciphers   on;
## server configuration
server {
    listen 443 ssl;
    listen 80 ;
    
    server_name ${!hostname};
    if ($http_x_forwarded_proto = '') {
        set $http_x_forwarded_proto  $scheme;
    }
    ## Application specific logs
    ## access_log /var/log/nginx/${!hostname}-access.log timing;
    ## error_log /var/log/nginx/${!hostname}-error.log;
    rewrite ^/$ /ui/ redirect;
    rewrite ^/ui$ /ui/ redirect;
    chunked_transfer_encoding on;
    client_max_body_size 0;
    location / {
    proxy_read_timeout  2400s;
    proxy_pass_header   Server;
    proxy_cookie_path   ~*^/.* /;
    proxy_buffer_size 128k;
    proxy_buffers 40 128k;
    proxy_busy_buffers_size 128k;
    proxy_pass          http://${!hostname}:8082;
    proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host:$server_port;
    proxy_set_header    X-Forwarded-Port  $server_port;
    proxy_set_header    X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header    Host              $http_host;
    proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;

        location ~ ^/artifactory/ {
            proxy_pass    http://${!hostname}:8081;
        }
    }
}
###################################
EOF

sed -i "s/\${!hostname}/${IP}/g" /var/opt/nginx/conf.d/artifactory.conf

groupadd -g 107 nginx
useradd -u 104 -g 107 nginx
sleep 10
chown -R nginx:nginx /var/opt/nginx

podman run --privileged=true --name artifactory-pro-nginx -d -p 80:80 -p 443:443 \
-e SKIP_AUTO_UPDATE_CONFIG=true \
-v /var/opt/nginx:/var/opt/jfrog/nginx \
docker.bintray.io/jfrog/nginx-artifactory-pro:latest
sleep 10
dockerID=$(podman ps --format "{{.ID}} {{.Image}} " | grep "/nginx-artifactory-pro:" |  awk '{print $1}')
podman logs $dockerID  | tail

podman generate systemd postgres > /etc/systemd/system/docker-postgres.service
podman generate systemd artifactory-pro > /etc/systemd/system/artifactory-pro.service
podman generate systemd artifactory-pro-nginx > /etc/systemd/system/artifactory-pro-nginx.service

sed -i 's/After=network-online.target/After=docker-postgres.service/g'  /etc/systemd/system/artifactory-pro.service
vi /etc/systemd/system/artifactory-pro.service
sed -i 's/After=network-online.target/After=artifactory-pro.service/g'  /etc/systemd/system/artifactory-pro-nginx.service
systemctl enable docker-postgres.service
systemctl enable artifactory-pro.service
systemctl enable artifactory-pro-nginx.service



#####################################################
#https://githubhelp.com/sameersbn/docker-squid
mkdir -p /opt/squid/
cat >> /opt/squid/squid.conf << EOF
acl localnet src 172.16.0.0/12 # RFC1918 possible internal network

acl SSL_ports port 443
acl Safe_ports port 80          # http
acl CONNECT method CONNECT
http_access allow all
http_port 3128
coredump_dir /var/spool/squid
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880
refresh_pattern .               0       20%     4320
EOF

podman run --privileged=true --name squid -d -p 80:3128 -e SKIP_AUTO_UPDATE_CONFIG=true -v /opt/squid/squid.conf:/etc/squid/squid.conf docker.io/sameersbn/squid:latest
podman generate systemd squid > /etc/systemd/system/mysquid.service
systemctl daemon-reload
systemctl  enable --now mysquid
systemctl  status mysquid



